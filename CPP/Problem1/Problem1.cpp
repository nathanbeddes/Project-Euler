#include <gmpxx.h>
#include <iostream>
#include <sys/time.h>
#include <cmath>
#include "MyTimer.h"



using namespace std;



void Problem1 ();
void Problem2 ();
void Problem3 ();



int main (int argc, char *argv[])
{
   timeFunc(Problem2);

   return(0);
}



/**
 *  If we list all the natural numbers below 10 that are multiples of 3 or 5, we
 *  get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the
 *  multiples of 3 or 5 below 1000
 */
void Problem1 ()
{
   int sum = 0;
   
   for (int i = 1; i < 1000; ++i) {
      if (!(i%3) || !(i%5)) {
         sum += i;
      }
   }
   cout << sum << endl;
}



/**
 *  Each new term in the Fibonacci sequence is generated by adding the previous
 *  two terms. By starting with 1 and 2, the first 10 terms will be:
 * 
 *  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 *  Find the sum of all the even-valued terms in the sequence which do not
 *  exceed four million.
 */
void Problem2 ()
{
   int sum = 0;
   int fib1 = 1;
   int fib2 = 2;
   int tmp;

   for (int i = 0; fib1 < 4000000; ++i) {
      if (!(fib1%2)) {
         sum += fib1;
      }
      tmp = fib1 + fib2;
      fib1 = fib2;
      fib2 = tmp;
   }
   
   cout << sum << endl;
}



/**
 * The prime factors of 13195 are 5, 7, 13 and 29. 
 *  
 * What is the largest prime factor of the number 600851475143 ? 
 */
bool isPrime (mpz_class& primeCandidate);
void Problem3 ()
{
   mpz_class bigNum;
   bigNum = "600851475143";

   mpz_class biggestPrime = sqrt(bigNum);
   cout << "Prime factors of " << bigNum << ":" << endl;
   if ((biggestPrime%2) == 0) {
      --biggestPrime;
   }
   while (biggestPrime > 1) {
      if (isPrime(biggestPrime) && ((bigNum%biggestPrime) == 0)) {
         cout << biggestPrime << endl;
         return;
      }
      biggestPrime -= 2;
   }
}
bool isPrime (mpz_class& primeCandidate)
{
   if ((primeCandidate%2) == 0) {
//    if (primeCandidate == 2) {
//       return true;
//    } else {
         return false;
//    }
   }
   mpz_class squareRoot;
   squareRoot = sqrt(primeCandidate);
   for (int i = 3; i <=  squareRoot; i+=2) {
      if ((primeCandidate%i) == 0) {
         return false;
      }
   }

   return true;
}
